AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Stack for weather analysis

Parameters:
  Environment: 
    Type: String
    Description: Name of the Environment
  
  BucketName:
    Type: String
    Description: Name of the bucket that will be used to store data

  IncomingCscSnsTopicName:
    Type: String
    Description: Topic name for s3 events


Resources:
  Bucket:
    Type: AWS::S3::Bucket
    DependsOn: 
      - S3ToSnsRole
    Properties: 
      BucketName: !Ref BucketName
      NotificationConfiguration:
        TopicConfigurations:
          - Event: s3:ObjectCreated:*
            Topic: !Ref IncomingCsvTopic
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: incoming/

  S3ToSnsRole:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref IncomingCsvTopic
      PolicyDocument:
        Id: S3ToSnsRolePolicy
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: "*"
            Action:
              - sns:Publish
            Resource:
              - !Ref IncomingCsvTopic
            Sid: IncomingCsvTopicPolicy
                    
  WeatherDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Description: Database for weather analysis
        Name: weather_db


  IncomingCsvTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Ref IncomingCscSnsTopicName
      TopicName: !Ref IncomingCscSnsTopicName
  

  ## StepFunctions
  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - lambda:InvokeFunction
                Resource: "*"
              - Effect: Allow
                Action:
                  - states:StartExecution
                  - states:DescribeExecution
                  - states:StopExecution
                Resource: "*"
              - Effect: Allow
                Action: 
                  - sns:Publish
                Resource: "*"
              - Effect: Allow
                Action: 
                  - events:PutTargets
                  - events:PutRule
                  - events:DescribeRule
                Resource: "arn:aws:events:*:*:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule"

  WeatherStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: WeatherStateMachine
      Definition:
        StartAt: LoadCsv
        States:
          LoadCsv:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              FunctionName: !Ref CsvToParquetFunction
            TimeoutSeconds: 300
            ResultPath: "$.csv"
            OutputPath: "$"
            Next: QueryWeatherTable
          QueryWeatherTable:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              FunctionName: !Ref QueryWeatherFunction
            TimeoutSeconds: 300
            ResultPath: "$"
            OutputPath: "$"
            End: true

      RoleArn: !GetAtt [StateMachineRole, Arn]                
              

  # AWS Data Wrangler Lambda Layer
  WranglerLambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.8
      Content:
        S3Bucket: "aws-data-wrangler-public-artifacts"
        S3Key: "releases/2.11.0/awswrangler-layer-2.11.0-py3.8.zip"
      Description: "AWS Data Wrangler"
      LayerName: "aws-data-wrangler"
      LicenseInfo: Apache 2.0

  SnsToStateMachineFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/sns_to_stepfunction
      Handler: main.handler
      Runtime: python3.8
      Timeout: 600
      MemorySize: 128
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref WeatherStateMachine
      Events:
        Sns:
          Type: SNS
          Properties:
            Topic: !Ref IncomingCsvTopic
      Policies:
        - Statement:
          - Effect: Allow
            Action: 
              - logs:*
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action: 
              - s3:GetObject*
              - s3:PutObject*
              - s3:DeleteObject*
              - s3:ListBucket
            Resource:
              - !Sub arn:aws:s3:::${BucketName}/*
              - !Sub arn:aws:s3:::${BucketName}
          - Effect: Allow
            Action:
              - states:StartExecution
            Resource: !Ref WeatherStateMachine
                
  CsvToParquetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/csv_to_parquet
      Handler: main.handler
      Runtime: python3.8
      Timeout: 600
      MemorySize: 1024
      Layers:
        - !Ref WranglerLambdaLayer
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName
          TABLE_NAME: t_weather_raw
          DATABASE_NAME: !Ref WeatherDatabase
          PARTITION_COLUMN: ObservationDate
      Policies:
        - Statement:
          - Effect: Allow
            Action: 
              - logs:*
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action: 
              - s3:GetObject*
              - s3:PutObject*
              - s3:DeleteObject*
              - s3:ListBucket
            Resource:
              - !Sub arn:aws:s3:::${BucketName}/*
              - !Sub arn:aws:s3:::${BucketName}
          - Effect: Allow
            Action:
              - glue:*
            Resource: "*"

  QueryWeatherFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/query_weather
      Handler: main.handler
      Runtime: python3.8
      Timeout: 600
      MemorySize: 1024
      Layers:
        - !Ref WranglerLambdaLayer
      Environment:
        Variables:
          TABLE_NAME: t_weather_raw
          DATABASE_NAME: !Ref WeatherDatabase
          BUCKET_NAME: !Ref BucketName
      Policies:
        - Statement:
          - Effect: Allow
            Action: 
              - logs:*
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action: 
              - s3:*
            Resource: "*"
          - Effect: Allow
            Action:
              - glue:*
            Resource: "*"            
          - Effect: Allow
            Action:
              - athena:*
            Resource: "*"  
Outputs:
  Bucket:
    Value: !Ref Bucket
    Description: Bucket name
  WeatherDatabase:
    Value: !Ref WeatherDatabase
    Description: Database name